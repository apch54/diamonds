// Generated by CoffeeScript 1.12.2
Phacker.Game.Diamonds = (function() {
  function Diamonds(gm) {
    this.gm = gm;
    this._fle_ = 'Diamonds';
    this.Pm = this.gm.parameters;
    this.pm = this.Pm.dmds = {
      n: 97,
      vx0: 100,
      vx1: 20,
      msg_bsk: 'mes bsk',
      msg_scl: 'mes scl',
      msg_itself: 'mes itself',
      names: ['blue_ball', 'green_ball', 'pink_ball', 'red_ball', 'yellow_ball'],
      x1: this.Pm.mec.x0 - this.Pm.mec.w / 2 + 5,
      x2: this.Pm.mec.x0 - 20,
      x3: this.Pm.mec.x0 + this.Pm.mec.w / 2 - 56,
      y1: this.Pm.mec.y0 + 65,
      bounce: {
        x: .2,
        y: .05
      },
      g: 300
    };
    this.grp0 = this.gm.add.physicsGroup();
    this.grp0.enableBody = true;
    this.grp1 = this.gm.add.physicsGroup();
    this.grp1.enableBody = true;
    this.init();
  }

  Diamonds.prototype.start_game = function() {
    var d0, d1, d2, d3;
    d0 = this.dmd_transfert(0);
    d0.x = this.Pm.rop.x0 + this.Pm.rop.w / 2 - 2;
    d0.y = 1;
    d1 = this.dmd_transfert(4);
    d1.x = this.Pm.rop.x0 + this.Pm.rop.w / 2 - 2;
    d1.y = 60;
    d2 = this.dmd_transfert(7);
    d2.x = this.Pm.rop.x0 + this.Pm.rop.w / 2 - 2;
    d2.y = 70;
    return d3 = this.dmd_transfert(7);
  };

  Diamonds.prototype.collide_socle = function(scl) {
    if (this.gm.physics.arcade.collide(this.grp0, scl, function() {
      return true;
    }, function(dmd, scl) {
      return this.when_collide_scl(dmd, scl);
    }, this)) {
      return this.pm.mes_scl;
    }
    return 'no';
  };

  Diamonds.prototype.when_collide_scl = function(dmd, scl) {
    switch (scl.pos) {
      case 'hight-left':
        dmd.body.velocity.x = this.pm.vx0;
        break;
      case 'hight-right':
        dmd.body.velocity.x = -this.pm.vx0;
        break;
      case 'bottom-left':
        dmd.body.velocity.x = -this.pm.vx0;
        break;
      case 'bottom-right':
        dmd.body.velocity.x = this.pm.vx0;
    }
    return true;
  };

  Diamonds.prototype.collide_baskets = function(bsk) {
    if (this.gm.physics.arcade.collide(this.grp0, bsk, function() {
      return true;
    }, function(dmd, bsk) {
      return this.when_collide_bsk(dmd, bsk);
    }, this)) {
      return this.pm.mes_bsk;
    }
    return 'no';
  };

  Diamonds.prototype.when_collide_bsk = function(dmd, bsk) {
    var ref, ref1;
    if (bsk.typ === 'lft') {
      if ((-10 < (ref = bsk.y - dmd.y - bsk.body.height / 2) && ref < 10)) {
        this.twn_move(dmd, dmd.x + 20, dmd.y + 30);
      } else {
        dmd.x += 1;
      }
    } else if (bsk.typ === 'rgt') {
      if ((-10 < (ref1 = bsk.y - dmd.y - bsk.body.height / 2) && ref1 < 10)) {
        this.twn_move(dmd, dmd.x - 20, dmd.y + 30);
      } else {
        dmd.x -= 1;
      }
    } else if (bsk.typ === 'btm') {
      dmd.body.velocity.y = 0;
      dmd.y = bsk.y - 15;
    }
    return true;
  };

  Diamonds.prototype.collide_itself = function() {
    if (this.gm.physics.arcade.collide(this.grp0, this.grp0, function() {
      return true;
    }, function(d1, d2) {
      return this.when_collide_itself(d1, d2);
    }, this)) {
      return this.pm.mes_itself;
    }
    return 'no';
  };

  Diamonds.prototype.when_collide_itself = function(d1, d2) {
    if (d1.x < d2.x) {
      d1.body.velocity.x -= this.pm.vx1;
      d2.body.velocity.x += this.pm.vx1;
    } else {
      d1.body.velocity.x += this.pm.vx1;
      d2.body.velocity.x -= this.pm.vx1;
    }
    return true;
  };

  Diamonds.prototype.twn_move = function(dmd, x0, y0) {
    this.go_center = this.gm.add.tween(dmd);
    return this.go_center.to({
      x: x0,
      y: y0
    }, 200, Phaser.Easing.Cubic.Out, true);
  };

  Diamonds.prototype.init = function() {
    var col, col1, col2, col3, dmd, i, j, md, ref, results, x, y;
    x = this.pm.x1;
    y = this.pm.y1 + 10;
    col1 = this.gm.rnd.integerInRange(0, 4);
    col2 = (col1 + 1) % 5;
    col3 = (col1 + 2) % 5;
    results = [];
    for (i = j = 0, ref = this.pm.n; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if ((md = i % 14) === 0) {
        y -= 10;
        x = this.pm.x1;
        col = col1;
      } else if (md === 5) {
        x = this.pm.x2;
        col = col2;
      } else if (md === 9) {
        x = this.pm.x3;
        col = col3;
      } else {
        x += 10;
      }
      dmd = this.grp1.create(x, y, this.pm.names[col]);
      results.push(dmd.frame2 = this.pm.names[col]);
    }
    return results;
  };

  Diamonds.prototype.one_dmds_grp = function(x, y, bll) {
    var dmd;
    dmd = this.grp0.create(x, y, bll);
    dmd.body.bounce.y = 0.2;
    return dmd.body.bounce.x = .4;
  };

  Diamonds.prototype.dmd_transfert = function(n) {
    var d0, d1, l;
    if ((l = this.grp1.length) < n) {
      n = l - 1;
    }
    d1 = this.grp1.getAt(n);
    d0 = this.grp0.create(d1.x, d1.y, d1.frame2);
    d0.body.gravity.y = this.pm.g;
    d0.body.bounce.y = this.pm.bounce.y;
    d0.body.bounce.x = this.pm.bounce.x;
    d1.destroy();
    return d0;
  };

  return Diamonds;

})();
